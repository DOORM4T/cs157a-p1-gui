{"version":3,"sources":["components/ConnectionTest.tsx","LoginContext.tsx","components/DialogModal.tsx","components/ExitToTitleButton.tsx","components/Modals/AccountSummaryModal.tsx","components/Modals/ReportBModal.tsx","hooks/useRedirectIfNotLoggedIn.tsx","components/Modals/CloseAccountModal.tsx","components/Modals/DepositModal.tsx","components/Modals/OpenAccountModal.tsx","components/Modals/TransferModal.tsx","components/Modals/WithdrawModal.tsx","pages/CustomerPage.tsx","pages/AdminPage.tsx","hooks/useGetReportA.ts","components/Modals/LoginModal.tsx","components/Modals/NewCustomerModal.tsx","pages/TitlePage.tsx","App.tsx","theme.ts","index.tsx"],"names":["ConnectionTest","useState","isConnected","setConnected","useEffect","a","fetch","response","text","isDbConnected","testConnection","then","color","LoginContext","createContext","customerId","LoginProvider","children","setCustomerId","Provider","value","DialogModal","props","isOpen","handleConfirm","handleClose","modalContent","onClose","closeable","animate","autoFocus","size","SIZE","auto","role","ROLE","dialog","headerText","kind","ButtonKind","tertiary","onClick","cancelText","confirmText","useDialogModal","setIsOpen","open","close","ExitToTitleButton","navigate","useNavigate","useContext","ROUTES","title","AccountSummaryModal","accountSummaryModal","cusID","setCusID","resetState","handleSubmit","endpoint","accountSummaryText","alert","console","error","minWidth","maxWidth","label","clearable","onChange","e","currentTarget","ReportBModal","reportBModal","minAge","setMinAge","maxAge","setMaxAge","reportBText","useRedirectIfNotLoggedIn","params","redirect","requireAdmin","CloseAccountModal","closeAccountModal","accNum","setAccNum","Error","resultText","window","DepositModal","depositModal","amount","setAmount","clear","depositResponse","OpenAccountModal","openAccountModal","accountType","setAccountType","initialDeposit","setInitialDeposit","Number","newAccountId","undefined","result","align","ALIGN","horizontal","TransferModal","transferModal","srcAccNum","setSrcAccNum","destAccNum","setDestAccNum","transferResponse","WithdrawModal","withdrawModal","CustomerPage","margin","display","flexDirection","alignItems","$style","textAlign","btnStyles","width","height","CustomerScreenModalManager","flexGridColumnCount","gridGap","gridColumnGap","AdminPage","AdminScreenModalManager","getReportA","LoginModal","loginModal","id","setId","pin","setPin","admin","canLogin","customer","type","NewCustomerModal","newCustomerModal","name","setName","gender","setGender","age","setAge","newCustomerId","TitlePage","TitleScreenModalManager","marginRight","marginBottom","App","overflow","backgroundColor","style","position","left","top","path","element","caseSensitive","theme","createDarkTheme","primaryFontFamily","engine","Styletron","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c963dbda.chunk.js","sourcesContent":["import { ParagraphXSmall } from 'baseui/typography'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst TEST_CONNECTION_ENDPOINT = '/api/testConnection'\r\n\r\nconst ConnectionTest = () => {\r\n  const [isConnected, setConnected] = useState<boolean | null>(null)\r\n\r\n  useEffect(() => {\r\n    const testConnection = async () => {\r\n      const response = await fetch(TEST_CONNECTION_ENDPOINT)\r\n      const isDbConnected = (await response.text()) === 'true' ? true : false // testConnection returns \"true\" or \"false\"\r\n      return isDbConnected\r\n    }\r\n\r\n    testConnection().then((isDbConnected) => {\r\n      setConnected(isDbConnected)\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      {isConnected === null && (\r\n        <ParagraphXSmall color=\"yellow\">CONNECTING...</ParagraphXSmall>\r\n      )}\r\n      {isConnected === true && (\r\n        <ParagraphXSmall color=\"green\">CONNECTED</ParagraphXSmall>\r\n      )}\r\n      {isConnected === false && (\r\n        <ParagraphXSmall color=\"red\">\r\n          WARNING: DATABASE CONNECTION FAILED\r\n        </ParagraphXSmall>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ConnectionTest\r\n","import { createContext, useState } from 'react'\r\n\r\ninterface ILoginProvider {\r\n  customerId: string | null\r\n  setCustomerId?: React.Dispatch<React.SetStateAction<string | null>>\r\n}\r\nexport const LoginContext = createContext<ILoginProvider>({\r\n  customerId: null,\r\n})\r\n\r\nexport const LoginProvider: React.FC = ({ children }) => {\r\n  const [customerId, setCustomerId] = useState<string | null>(null)\r\n\r\n  return (\r\n    <LoginContext.Provider value={{ customerId, setCustomerId }}>\r\n      {children}\r\n    </LoginContext.Provider>\r\n  )\r\n}\r\n","import { KIND as ButtonKind } from 'baseui/button'\r\nimport {\r\n  Modal,\r\n  ModalBody,\r\n  ModalButton,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ROLE,\r\n  SIZE,\r\n} from 'baseui/modal'\r\nimport { useState } from 'react'\r\n\r\ninterface IProps {\r\n  isOpen: boolean\r\n  handleConfirm: () => void\r\n  handleClose: () => void\r\n  modalContent?: React.ReactNode\r\n  text?: {\r\n    headerText?: React.ReactNode\r\n    cancelText?: React.ReactNode\r\n    confirmText?: React.ReactNode\r\n  }\r\n}\r\nconst DialogModal = (props: IProps) => {\r\n  const { isOpen, handleConfirm, handleClose, modalContent, text } = props\r\n\r\n  return (\r\n    <Modal\r\n      onClose={handleClose}\r\n      closeable={false}\r\n      isOpen={isOpen}\r\n      animate\r\n      autoFocus\r\n      size={SIZE.auto}\r\n      role={ROLE.dialog}\r\n    >\r\n      {text?.headerText && <ModalHeader>{text.headerText}</ModalHeader>}\r\n      <ModalBody>{modalContent}</ModalBody>\r\n      <ModalFooter>\r\n        <ModalButton kind={ButtonKind.tertiary} onClick={handleClose}>\r\n          {text?.cancelText || 'Cancel'}\r\n        </ModalButton>\r\n        <ModalButton onClick={handleConfirm}>\r\n          {text?.confirmText || 'Confirm'}\r\n        </ModalButton>\r\n      </ModalFooter>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DialogModal\r\n\r\nexport const useDialogModal = (): IUseDialogModalReturnValue => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n\r\n  const close = () => setIsOpen(false)\r\n\r\n  const open = () => setIsOpen(true)\r\n\r\n  return { isOpen, open, close }\r\n}\r\n\r\nexport interface IUseDialogModalReturnValue {\r\n  isOpen: boolean\r\n  open: () => void\r\n  close: () => void\r\n}\r\n","import { Button, ButtonProps } from 'baseui/button'\r\nimport { useContext } from 'react'\r\nimport { useNavigate } from 'react-router'\r\nimport { ROUTES } from '../App'\r\nimport { LoginContext } from '../LoginContext'\r\n\r\nexport const ExitToTitleButton = (props: ButtonProps) => {\r\n  const navigate = useNavigate()\r\n  const { setCustomerId } = useContext(LoginContext)\r\n\r\n  const exitToTitle = () => {\r\n    setCustomerId && setCustomerId(null)\r\n    navigate(ROUTES.title)\r\n  }\r\n\r\n  return (\r\n    <Button onClick={exitToTitle} {...props}>\r\n      Exit\r\n    </Button>\r\n  )\r\n}\r\n","import { Block } from 'baseui/block'\r\nimport { FormControl } from 'baseui/form-control'\r\nimport { Input } from 'baseui/input'\r\nimport { useContext, useState } from 'react'\r\nimport { LoginContext } from '../../LoginContext'\r\nimport DialogModal, { IUseDialogModalReturnValue } from '../DialogModal'\r\n\r\nconst ACCOUNT_SUMMARY_ENDPOINT = '/api/accountSummary'\r\nexport const AccountSummaryModal = (props: {\r\n  accountSummaryModal: IUseDialogModalReturnValue\r\n}) => {\r\n  const { accountSummaryModal } = props\r\n\r\n  // By default, customer ID input is the logged in customer's ID. Can view other customer summaries as desired.\r\n  const { customerId } = useContext(LoginContext)\r\n  const [cusID, setCusID] = useState(customerId || '')\r\n\r\n  const resetState = () => {\r\n    setCusID(customerId || '')\r\n  }\r\n\r\n  const handleSubmit = async () => {\r\n    const endpoint = `${ACCOUNT_SUMMARY_ENDPOINT}?cusID=${cusID}`\r\n\r\n    try {\r\n      const response = await fetch(endpoint)\r\n      const accountSummaryText = await response.text()\r\n\r\n      alert(accountSummaryText)\r\n      accountSummaryModal.close()\r\n      resetState()\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <DialogModal\r\n      isOpen={accountSummaryModal.isOpen}\r\n      handleClose={() => {\r\n        accountSummaryModal.close()\r\n        resetState()\r\n      }}\r\n      handleConfirm={handleSubmit}\r\n      text={{ headerText: 'Account Summary', confirmText: 'View' }}\r\n      modalContent={\r\n        <Block minWidth=\"128px\" maxWidth=\"750px\">\r\n          <form>\r\n            <FormControl label={() => 'Customer ID'}>\r\n              <Input\r\n                clearable\r\n                onChange={(e) => setCusID(e.currentTarget.value)}\r\n                value={cusID}\r\n              />\r\n            </FormControl>\r\n          </form>\r\n        </Block>\r\n      }\r\n    />\r\n  )\r\n}\r\n","import { Block } from 'baseui/block'\r\nimport { FormControl } from 'baseui/form-control'\r\nimport { Input } from 'baseui/input'\r\nimport { Paragraph1 } from 'baseui/typography'\r\nimport { useState } from 'react'\r\nimport DialogModal, { IUseDialogModalReturnValue } from '../DialogModal'\r\n\r\nconst REPORT_B_ENDPOINT = '/api/reportB'\r\nexport const ReportBModal = (props: {\r\n  reportBModal: IUseDialogModalReturnValue\r\n}) => {\r\n  const { reportBModal } = props\r\n  const [minAge, setMinAge] = useState('')\r\n  const [maxAge, setMaxAge] = useState('')\r\n\r\n  const resetState = () => {\r\n    setMinAge('')\r\n    setMaxAge('')\r\n  }\r\n\r\n  const handleSubmit = async () => {\r\n    const endpoint = `${REPORT_B_ENDPOINT}?minAge=${minAge}&maxAge=${maxAge}`\r\n\r\n    try {\r\n      const response = await fetch(endpoint)\r\n      const reportBText = await response.text()\r\n\r\n      alert(reportBText)\r\n      reportBModal.close()\r\n      resetState()\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <DialogModal\r\n      isOpen={reportBModal.isOpen}\r\n      handleClose={() => {\r\n        reportBModal.close()\r\n        resetState()\r\n      }}\r\n      handleConfirm={handleSubmit}\r\n      text={{ headerText: 'Report B', confirmText: 'View' }}\r\n      modalContent={\r\n        <Block minWidth=\"128px\" maxWidth=\"750px\">\r\n          <form>\r\n            <Paragraph1>Find the Average Balance Between Age Groups</Paragraph1>\r\n            <form>\r\n              <FormControl label={() => 'Min Age'}>\r\n                <Input\r\n                  clearable\r\n                  onChange={(e) => setMinAge(e.currentTarget.value)}\r\n                  value={minAge}\r\n                />\r\n              </FormControl>\r\n              <FormControl label={() => 'Max Age'}>\r\n                <Input\r\n                  clearable\r\n                  onChange={(e) => setMaxAge(e.currentTarget.value)}\r\n                  value={maxAge}\r\n                />\r\n              </FormControl>\r\n            </form>\r\n          </form>\r\n        </Block>\r\n      }\r\n    />\r\n  )\r\n}\r\n","import { useContext, useEffect } from 'react'\r\nimport { useNavigate } from 'react-router'\r\nimport { ROUTES } from '../App'\r\nimport { LoginContext } from '../LoginContext'\r\n\r\nexport const useRedirectIfNotLoggedIn = (params?: {\r\n  requireAdmin?: boolean\r\n}) => {\r\n  const { customerId } = useContext(LoginContext)\r\n  const navigate = useNavigate()\r\n\r\n  const redirect = () => navigate(ROUTES.title)\r\n\r\n  useEffect(() => {\r\n    if (params?.requireAdmin && customerId !== '0') {\r\n      // Admin required? Prevent non-admin logins\r\n      redirect()\r\n      return\r\n    }\r\n\r\n    // Otherwise, prevent access to clients without a customer ID\r\n    const isLoggedIn = customerId === null\r\n    if (isLoggedIn) redirect()\r\n  }, [customerId])\r\n}\r\n","import { Block } from 'baseui/block'\r\nimport { FormControl } from 'baseui/form-control'\r\nimport { Input } from 'baseui/input'\r\nimport { useContext, useState } from 'react'\r\nimport { LoginContext } from '../../LoginContext'\r\nimport DialogModal, { IUseDialogModalReturnValue } from '../DialogModal'\r\n\r\nconst CLOSE_ACCOUNT_ENDPOINT = '/api/closeAccount'\r\nexport const CloseAccountModal = (props: {\r\n  closeAccountModal: IUseDialogModalReturnValue\r\n}) => {\r\n  const { closeAccountModal } = props\r\n\r\n  // Initial customer ID field will pre-fill w/ the logged in customer's ID...\r\n  // BUT customers can open accounts for other customers\r\n  const { customerId } = useContext(LoginContext)\r\n  const [accNum, setAccNum] = useState('')\r\n\r\n  const resetState = () => {\r\n    setAccNum('')\r\n  }\r\n\r\n  const handleSubmit = async () => {\r\n    if (!customerId) throw new Error('Invalid customer ID')\r\n    const endpoint = `${CLOSE_ACCOUNT_ENDPOINT}?cusID=${customerId}&accNum=${accNum}`\r\n\r\n    try {\r\n      const response = await fetch(endpoint)\r\n      const resultText = await response.text()\r\n      window.alert(resultText)\r\n      closeAccountModal.close()\r\n      resetState()\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <DialogModal\r\n      isOpen={closeAccountModal.isOpen}\r\n      handleClose={() => {\r\n        closeAccountModal.close()\r\n        resetState()\r\n      }}\r\n      handleConfirm={handleSubmit}\r\n      text={{\r\n        headerText: 'Close Account',\r\n      }}\r\n      modalContent={\r\n        <Block minWidth=\"128px\" maxWidth=\"750px\">\r\n          <form>\r\n            <FormControl label={() => 'Account Number'}>\r\n              <Input\r\n                clearable\r\n                onChange={(e) => setAccNum(e.currentTarget.value)}\r\n                value={accNum}\r\n              />\r\n            </FormControl>\r\n          </form>\r\n        </Block>\r\n      }\r\n    />\r\n  )\r\n}\r\n","import { Block } from 'baseui/block'\r\nimport { FormControl } from 'baseui/form-control'\r\nimport { Input } from 'baseui/input'\r\nimport { useState } from 'react'\r\nimport DialogModal, { IUseDialogModalReturnValue } from '../DialogModal'\r\n\r\nconst DEPOSIT_ENDPOINT = '/api/deposit'\r\nexport const DepositModal = (props: {\r\n  depositModal: IUseDialogModalReturnValue\r\n}) => {\r\n  const { depositModal } = props\r\n  const [accNum, setAccNum] = useState('')\r\n  const [amount, setAmount] = useState('')\r\n\r\n  const clear = () => {\r\n    setAccNum('')\r\n    setAmount('')\r\n  }\r\n\r\n  const handleSubmit = async () => {\r\n    const endpoint = `${DEPOSIT_ENDPOINT}?accNum=${accNum}&amount=${amount}`\r\n\r\n    try {\r\n      const response = await fetch(endpoint)\r\n      const depositResponse = await response.text()\r\n      alert(depositResponse)\r\n      depositModal.close()\r\n      clear()\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <DialogModal\r\n      isOpen={depositModal.isOpen}\r\n      handleClose={() => {\r\n        depositModal.close()\r\n        clear()\r\n      }}\r\n      handleConfirm={handleSubmit}\r\n      text={{ headerText: 'Deposit' }}\r\n      modalContent={\r\n        <Block minWidth=\"128px\" maxWidth=\"750px\">\r\n          <form>\r\n            <FormControl label={() => 'Account Number'}>\r\n              <Input\r\n                clearable\r\n                onChange={(e) => setAccNum(e.currentTarget.value)}\r\n                value={accNum}\r\n              />\r\n            </FormControl>\r\n            <FormControl label={() => 'Amount'}>\r\n              <Input\r\n                clearable\r\n                onChange={(e) => setAmount(e.currentTarget.value)}\r\n                value={amount}\r\n              />\r\n            </FormControl>\r\n          </form>\r\n        </Block>\r\n      }\r\n    />\r\n  )\r\n}\r\n","import { Block } from 'baseui/block'\r\nimport { FormControl } from 'baseui/form-control'\r\nimport { Input } from 'baseui/input'\r\nimport { ALIGN, Radio, RadioGroup } from 'baseui/radio'\r\nimport { useContext, useState } from 'react'\r\nimport { LoginContext } from '../../LoginContext'\r\nimport DialogModal, { IUseDialogModalReturnValue } from '../DialogModal'\r\n\r\ntype AccountType = 'C' | 'S' | null\r\nconst NEW_CUSTOMER_ENDPOINT = '/api/openAccount'\r\nexport const OpenAccountModal = (props: {\r\n  openAccountModal: IUseDialogModalReturnValue\r\n}) => {\r\n  // Initial customer ID field will pre-fill w/ the logged in customer's ID...\r\n  // BUT customers can open accounts for other customers\r\n  const { customerId } = useContext(LoginContext)\r\n  const { openAccountModal } = props\r\n  const [cusID, setCusID] = useState(customerId || '')\r\n\r\n  const [accountType, setAccountType] = useState<AccountType | null>(null)\r\n  const [initialDeposit, setInitialDeposit] = useState('')\r\n\r\n  const resetState = () => {\r\n    setCusID(customerId || '')\r\n    setAccountType(null)\r\n    setInitialDeposit('')\r\n  }\r\n\r\n  const handleSubmit = async () => {\r\n    const endpoint = `${NEW_CUSTOMER_ENDPOINT}?cusID=${cusID}&type=${accountType}&amount=${initialDeposit}`\r\n\r\n    try {\r\n      const response = await fetch(endpoint)\r\n      const newAccountId = Number(await response.text())\r\n\r\n      if (newAccountId === -1) throw new Error('Failed to open new account')\r\n      alert(`Customer ${cusID}'s new Account Number is: ${newAccountId}`)\r\n      openAccountModal.close()\r\n      resetState()\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <DialogModal\r\n      isOpen={openAccountModal.isOpen}\r\n      handleClose={() => {\r\n        openAccountModal.close()\r\n        resetState()\r\n      }}\r\n      handleConfirm={handleSubmit}\r\n      text={{ headerText: 'Open Account', confirmText: 'Confirm' }}\r\n      modalContent={\r\n        <Block minWidth=\"128px\" maxWidth=\"750px\">\r\n          <form>\r\n            <FormControl label={() => 'Customer ID'}>\r\n              <Input\r\n                clearable\r\n                onChange={(e) => setCusID(e.currentTarget.value)}\r\n                value={cusID}\r\n              />\r\n            </FormControl>\r\n            <FormControl label={() => 'Account Type'}>\r\n              <RadioGroup\r\n                value={accountType || undefined}\r\n                onChange={(e) => {\r\n                  let result: string | null = e.currentTarget.value\r\n                  if (result !== 'C' && result !== 'S') result = null\r\n                  setAccountType(result)\r\n                }}\r\n                align={ALIGN.horizontal}\r\n              >\r\n                <Radio value=\"C\">Checking</Radio>\r\n                <Radio value=\"S\">Savings</Radio>\r\n              </RadioGroup>\r\n            </FormControl>\r\n            <FormControl label={() => 'Initial Deposit'}>\r\n              <Input\r\n                clearable\r\n                onChange={(e) => setInitialDeposit(e.currentTarget.value)}\r\n                value={initialDeposit}\r\n              />\r\n            </FormControl>\r\n          </form>\r\n        </Block>\r\n      }\r\n    />\r\n  )\r\n}\r\n","import { Block } from 'baseui/block'\r\nimport { FormControl } from 'baseui/form-control'\r\nimport { Input } from 'baseui/input'\r\nimport { useContext, useState } from 'react'\r\nimport { LoginContext } from '../../LoginContext'\r\nimport DialogModal, { IUseDialogModalReturnValue } from '../DialogModal'\r\n\r\nconst TRANSFER_ENDPOINT = '/api/transfer'\r\nexport const TransferModal = (props: {\r\n  transferModal: IUseDialogModalReturnValue\r\n}) => {\r\n  const { transferModal } = props\r\n  // We'll pass customer ID automatically to check if the src account belongs to the customer\r\n  const { customerId } = useContext(LoginContext)\r\n\r\n  const [srcAccNum, setSrcAccNum] = useState('')\r\n  const [destAccNum, setDestAccNum] = useState('')\r\n  const [amount, setAmount] = useState('')\r\n\r\n  const clear = () => {\r\n    setSrcAccNum('')\r\n    setDestAccNum('')\r\n    setAmount('')\r\n  }\r\n\r\n  const handleSubmit = async () => {\r\n    if (!customerId) throw new Error('Invalid customer ID')\r\n    const endpoint = `${TRANSFER_ENDPOINT}?srcAccNum=${srcAccNum}&destAccNum=${destAccNum}&amount=${amount}&cusID=${customerId}`\r\n\r\n    try {\r\n      const response = await fetch(endpoint)\r\n      const transferResponse = await response.text()\r\n      alert(transferResponse)\r\n      transferModal.close()\r\n      clear()\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <DialogModal\r\n      isOpen={transferModal.isOpen}\r\n      handleClose={() => {\r\n        transferModal.close()\r\n        clear()\r\n      }}\r\n      handleConfirm={handleSubmit}\r\n      text={{ headerText: 'Transfer' }}\r\n      modalContent={\r\n        <Block minWidth=\"128px\" maxWidth=\"750px\">\r\n          <form>\r\n            <FormControl label={() => 'Source Account Number'}>\r\n              <Input\r\n                clearable\r\n                onChange={(e) => setSrcAccNum(e.currentTarget.value)}\r\n                value={srcAccNum}\r\n              />\r\n            </FormControl>\r\n            <FormControl label={() => 'Destination Account Number'}>\r\n              <Input\r\n                clearable\r\n                onChange={(e) => setDestAccNum(e.currentTarget.value)}\r\n                value={destAccNum}\r\n              />\r\n            </FormControl>\r\n            <FormControl label={() => 'Amount'}>\r\n              <Input\r\n                clearable\r\n                onChange={(e) => setAmount(e.currentTarget.value)}\r\n                value={amount}\r\n              />\r\n            </FormControl>\r\n          </form>\r\n        </Block>\r\n      }\r\n    />\r\n  )\r\n}\r\n","import { Block } from 'baseui/block'\r\nimport { FormControl } from 'baseui/form-control'\r\nimport { Input } from 'baseui/input'\r\nimport { useState } from 'react'\r\nimport DialogModal, { IUseDialogModalReturnValue } from '../DialogModal'\r\n\r\nconst WITHDRAW_ENDPOINT = '/api/withdraw'\r\nexport const WithdrawModal = (props: {\r\n  withdrawModal: IUseDialogModalReturnValue\r\n}) => {\r\n  const { withdrawModal } = props\r\n  const [accNum, setAccNum] = useState('')\r\n  const [amount, setAmount] = useState('')\r\n\r\n  const clear = () => {\r\n    setAccNum('')\r\n    setAmount('')\r\n  }\r\n\r\n  const handleSubmit = async () => {\r\n    const endpoint = `${WITHDRAW_ENDPOINT}?accNum=${accNum}&amount=${amount}`\r\n\r\n    try {\r\n      const response = await fetch(endpoint)\r\n      const depositResponse = await response.text()\r\n      alert(depositResponse)\r\n      withdrawModal.close()\r\n      clear()\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <DialogModal\r\n      isOpen={withdrawModal.isOpen}\r\n      handleClose={() => {\r\n        withdrawModal.close()\r\n        clear()\r\n      }}\r\n      handleConfirm={handleSubmit}\r\n      text={{ headerText: 'Withdraw' }}\r\n      modalContent={\r\n        <Block minWidth=\"128px\" maxWidth=\"750px\">\r\n          <form>\r\n            <FormControl label={() => 'Account Number'}>\r\n              <Input\r\n                clearable\r\n                onChange={(e) => setAccNum(e.currentTarget.value)}\r\n                value={accNum}\r\n              />\r\n            </FormControl>\r\n            <FormControl label={() => 'Amount'}>\r\n              <Input\r\n                clearable\r\n                onChange={(e) => setAmount(e.currentTarget.value)}\r\n                value={amount}\r\n              />\r\n            </FormControl>\r\n          </form>\r\n        </Block>\r\n      }\r\n    />\r\n  )\r\n}\r\n","import { Block } from 'baseui/block'\r\nimport { Button, ButtonProps } from 'baseui/button'\r\nimport { FlexGrid, FlexGridItem } from 'baseui/flex-grid'\r\nimport { DisplayMedium, Paragraph1 } from 'baseui/typography'\r\nimport { useContext } from 'react'\r\nimport { $StyleProp } from 'styletron-react'\r\nimport { useDialogModal } from '../components/DialogModal'\r\nimport { ExitToTitleButton } from '../components/ExitToTitleButton'\r\nimport { AccountSummaryModal } from '../components/Modals/AccountSummaryModal'\r\nimport { CloseAccountModal } from '../components/Modals/CloseAccountModal'\r\nimport { DepositModal } from '../components/Modals/DepositModal'\r\nimport { OpenAccountModal } from '../components/Modals/OpenAccountModal'\r\nimport { TransferModal } from '../components/Modals/TransferModal'\r\nimport { WithdrawModal } from '../components/Modals/WithdrawModal'\r\nimport { useRedirectIfNotLoggedIn } from '../hooks/useRedirectIfNotLoggedIn'\r\nimport { LoginContext } from '../LoginContext'\r\n\r\nconst CustomerPage = () => {\r\n  useRedirectIfNotLoggedIn()\r\n\r\n  // Hide this page if the user isn't logged in\r\n  const { customerId } = useContext(LoginContext)\r\n  if (customerId === null) return null\r\n\r\n  return (\r\n    <Block\r\n      margin=\"2rem auto\"\r\n      display=\"flex\"\r\n      flexDirection=\"column\"\r\n      alignItems=\"center\"\r\n      $style={{ textAlign: 'center' }}\r\n    >\r\n      <DisplayMedium>Customer</DisplayMedium>\r\n      <Paragraph1>Main Menu | ID: {customerId}</Paragraph1>\r\n      <CustomerScreenModalManager />\r\n    </Block>\r\n  )\r\n}\r\n\r\nexport default CustomerPage\r\n\r\nexport const btnStyles: $StyleProp<ButtonProps> = {\r\n  width: '100%',\r\n  height: '100%',\r\n}\r\nconst CustomerScreenModalManager = () => {\r\n  const openAccountModal = useDialogModal()\r\n  const closeAccountModal = useDialogModal()\r\n  const depositModal = useDialogModal()\r\n  const withdrawModal = useDialogModal()\r\n  const transferModal = useDialogModal()\r\n  const accountSummaryModal = useDialogModal()\r\n\r\n  return (\r\n    <FlexGrid\r\n      flexGridColumnCount={3}\r\n      gridGap=\"1rem\"\r\n      gridColumnGap=\"1rem\"\r\n      width=\"50%\"\r\n      maxWidth=\"300px\"\r\n    >\r\n      <FlexGridItem>\r\n        <Button onClick={openAccountModal.open} $style={btnStyles}>\r\n          Open Account\r\n        </Button>\r\n      </FlexGridItem>\r\n      <FlexGridItem>\r\n        <Button onClick={closeAccountModal.open} $style={btnStyles}>\r\n          Close Account\r\n        </Button>\r\n      </FlexGridItem>\r\n      <FlexGridItem>\r\n        <Button onClick={depositModal.open} $style={btnStyles}>\r\n          Deposit\r\n        </Button>\r\n      </FlexGridItem>\r\n      <FlexGridItem>\r\n        <Button onClick={withdrawModal.open} $style={btnStyles}>\r\n          Withdraw\r\n        </Button>\r\n      </FlexGridItem>\r\n      <FlexGridItem>\r\n        <Button onClick={transferModal.open} $style={btnStyles}>\r\n          Transfer\r\n        </Button>\r\n      </FlexGridItem>\r\n      <FlexGridItem>\r\n        <Button onClick={accountSummaryModal.open} $style={btnStyles}>\r\n          Account Summary\r\n        </Button>\r\n      </FlexGridItem>\r\n      <FlexGridItem>\r\n        <ExitToTitleButton $style={btnStyles} />\r\n      </FlexGridItem>\r\n\r\n      <OpenAccountModal openAccountModal={openAccountModal} />\r\n      <CloseAccountModal closeAccountModal={closeAccountModal} />\r\n      <DepositModal depositModal={depositModal} />\r\n      <WithdrawModal withdrawModal={withdrawModal} />\r\n      <TransferModal transferModal={transferModal} />\r\n      <AccountSummaryModal accountSummaryModal={accountSummaryModal} />\r\n    </FlexGrid>\r\n  )\r\n}\r\n","import { Block } from 'baseui/block'\r\nimport { Button } from 'baseui/button'\r\nimport { FlexGrid, FlexGridItem } from 'baseui/flex-grid'\r\nimport { DisplayMedium, Paragraph1 } from 'baseui/typography'\r\nimport { useDialogModal } from '../components/DialogModal'\r\nimport { ExitToTitleButton } from '../components/ExitToTitleButton'\r\nimport { AccountSummaryModal } from '../components/Modals/AccountSummaryModal'\r\nimport { ReportBModal } from '../components/Modals/ReportBModal'\r\nimport { useGetReportA } from '../hooks/useGetReportA'\r\nimport { useRedirectIfNotLoggedIn } from '../hooks/useRedirectIfNotLoggedIn'\r\nimport { btnStyles } from './CustomerPage'\r\n\r\nconst AdminPage = () => {\r\n  useRedirectIfNotLoggedIn({ requireAdmin: true })\r\n\r\n  return (\r\n    <Block\r\n      margin=\"2rem auto\"\r\n      display=\"flex\"\r\n      flexDirection=\"column\"\r\n      alignItems=\"center\"\r\n      $style={{ textAlign: 'center' }}\r\n    >\r\n      <DisplayMedium>Admin</DisplayMedium>\r\n      <Paragraph1>Main Menu</Paragraph1>\r\n      <AdminScreenModalManager />\r\n    </Block>\r\n  )\r\n}\r\n\r\nexport default AdminPage\r\n\r\nconst AdminScreenModalManager = () => {\r\n  const accountSummaryModal = useDialogModal()\r\n  const getReportA = useGetReportA()\r\n  const reportBModal = useDialogModal()\r\n\r\n  return (\r\n    <FlexGrid\r\n      flexGridColumnCount={3}\r\n      gridGap=\"1rem\"\r\n      gridColumnGap=\"1rem\"\r\n      width=\"50%\"\r\n      maxWidth=\"300px\"\r\n    >\r\n      <FlexGridItem>\r\n        <Button onClick={accountSummaryModal.open} $style={btnStyles}>\r\n          Account Summary\r\n        </Button>\r\n      </FlexGridItem>\r\n      <FlexGridItem>\r\n        <Button onClick={getReportA} $style={btnStyles}>\r\n          Report A\r\n        </Button>\r\n      </FlexGridItem>\r\n      <FlexGridItem>\r\n        <Button onClick={reportBModal.open} $style={btnStyles}>\r\n          Report B\r\n        </Button>\r\n      </FlexGridItem>\r\n      <FlexGridItem>\r\n        <ExitToTitleButton $style={btnStyles} />\r\n      </FlexGridItem>\r\n\r\n      <AccountSummaryModal accountSummaryModal={accountSummaryModal} />\r\n      <ReportBModal reportBModal={reportBModal} />\r\n    </FlexGrid>\r\n  )\r\n}\r\n","const REPORT_A_ENDPOINT = '/api/reportA'\r\n\r\nexport const useGetReportA = () => {\r\n  const getReportA = async () => {\r\n    const endpoint = `${REPORT_A_ENDPOINT}`\r\n\r\n    try {\r\n      const response = await fetch(endpoint)\r\n      const accountSummaryText = await response.text()\r\n      alert(accountSummaryText)\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  return getReportA\r\n}\r\n","import { Block } from 'baseui/block'\r\nimport { FormControl } from 'baseui/form-control'\r\nimport { Input } from 'baseui/input'\r\nimport { useContext, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { ROUTES } from '../../App'\r\nimport { LoginContext } from '../../LoginContext'\r\nimport DialogModal, { IUseDialogModalReturnValue } from '../DialogModal'\r\n\r\nconst LOGIN_ENDPOINT = '/api/canLogin'\r\nexport const LoginModal = (props: {\r\n  loginModal: IUseDialogModalReturnValue\r\n}) => {\r\n  const navigate = useNavigate()\r\n  const { setCustomerId } = useContext(LoginContext)\r\n\r\n  const { loginModal } = props\r\n  const [id, setId] = useState('')\r\n  const [pin, setPin] = useState('')\r\n\r\n  const clear = () => {\r\n    setId('')\r\n    setPin('')\r\n  }\r\n\r\n  const handleSubmit = async () => {\r\n    const isAdmin = id === '0' && pin === '0' // Admin logs in with ID=0 and PIN=0\r\n    if (isAdmin) {\r\n      loginModal.close()\r\n      clear()\r\n      setCustomerId && setCustomerId('0')\r\n      navigate(ROUTES.admin)\r\n      return\r\n    }\r\n\r\n    const endpoint = `${LOGIN_ENDPOINT}?cusID=${id}&pin=${pin}`\r\n\r\n    let canLogin = false\r\n    try {\r\n      const response = await fetch(endpoint)\r\n      canLogin = (await response.text()) === 'true' ? true : false // API endpoint returns true/false as a String\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n\r\n    if (!canLogin) {\r\n      window.alert('Login failed')\r\n      return\r\n    }\r\n\r\n    // \"Log in\" the customer, remembering their ID in global LoginContext state\r\n    setCustomerId && setCustomerId(id)\r\n    navigate(ROUTES.customer)\r\n\r\n    loginModal.close()\r\n    clear()\r\n  }\r\n\r\n  return (\r\n    <DialogModal\r\n      isOpen={loginModal.isOpen}\r\n      handleClose={() => {\r\n        loginModal.close()\r\n        clear()\r\n      }}\r\n      handleConfirm={handleSubmit}\r\n      text={{ headerText: 'Customer Login', confirmText: 'Login' }}\r\n      modalContent={\r\n        <Block minWidth=\"128px\" maxWidth=\"750px\">\r\n          <form>\r\n            <FormControl label={() => 'Customer ID'}>\r\n              <Input\r\n                clearable\r\n                onChange={(e) => setId(e.currentTarget.value)}\r\n                value={id}\r\n              />\r\n            </FormControl>\r\n            <FormControl label={() => 'Customer PIN'}>\r\n              <Input\r\n                type=\"password\"\r\n                clearable\r\n                onChange={(e) => setPin(e.currentTarget.value)}\r\n                value={pin}\r\n              />\r\n            </FormControl>\r\n          </form>\r\n        </Block>\r\n      }\r\n    />\r\n  )\r\n}\r\n","import { Block } from 'baseui/block'\r\nimport { FormControl } from 'baseui/form-control'\r\nimport { Input } from 'baseui/input'\r\nimport { ALIGN, Radio, RadioGroup } from 'baseui/radio'\r\nimport { useState } from 'react'\r\nimport DialogModal, { IUseDialogModalReturnValue } from '../DialogModal'\r\n\r\ntype Gender = 'M' | 'F' | null\r\nconst NEW_CUSTOMER_ENDPOINT = '/api/newCustomer'\r\nexport const NewCustomerModal = (props: {\r\n  newCustomerModal: IUseDialogModalReturnValue\r\n}) => {\r\n  const { newCustomerModal } = props\r\n  const [name, setName] = useState('')\r\n  const [gender, setGender] = useState<Gender | null>(null)\r\n  const [age, setAge] = useState('')\r\n  const [pin, setPin] = useState('')\r\n\r\n  const clear = () => {\r\n    setName('')\r\n    setGender(null)\r\n    setAge('')\r\n    setPin('')\r\n  }\r\n\r\n  const handleSubmit = async () => {\r\n    const endpoint = `${NEW_CUSTOMER_ENDPOINT}?name=${name}&gender=${gender}&age=${age}&pin=${pin}`\r\n\r\n    try {\r\n      const response = await fetch(endpoint)\r\n      const newCustomerId = Number(await response.text())\r\n\r\n      if (newCustomerId === -1) throw new Error('Failed to create new customer')\r\n      alert(`Your customer ID is: ${newCustomerId}`)\r\n      newCustomerModal.close()\r\n      clear()\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <DialogModal\r\n      isOpen={newCustomerModal.isOpen}\r\n      handleClose={() => {\r\n        newCustomerModal.close()\r\n        clear()\r\n      }}\r\n      handleConfirm={handleSubmit}\r\n      text={{ headerText: 'New Customer' }}\r\n      modalContent={\r\n        <Block minWidth=\"128px\" maxWidth=\"750px\">\r\n          <form>\r\n            <FormControl label={() => 'Name'}>\r\n              <Input\r\n                clearable\r\n                onChange={(e) => setName(e.currentTarget.value)}\r\n                value={name}\r\n              />\r\n            </FormControl>\r\n            <FormControl label={() => 'Gender'}>\r\n              <RadioGroup\r\n                value={gender || undefined}\r\n                onChange={(e) => {\r\n                  let result: string | null = e.currentTarget.value\r\n                  if (result !== 'M' && result !== 'F') result = null\r\n                  setGender(result)\r\n                }}\r\n                align={ALIGN.horizontal}\r\n              >\r\n                <Radio value=\"M\">Male</Radio>\r\n                <Radio value=\"F\">Female</Radio>\r\n              </RadioGroup>\r\n            </FormControl>\r\n            <FormControl label={() => 'Age'}>\r\n              <Input\r\n                clearable\r\n                onChange={(e) => setAge(e.currentTarget.value)}\r\n                value={age}\r\n              />\r\n            </FormControl>\r\n            <FormControl label={() => 'PIN'}>\r\n              <Input\r\n                type=\"password\"\r\n                clearable\r\n                onChange={(e) => setPin(e.currentTarget.value)}\r\n                value={pin}\r\n              />\r\n            </FormControl>\r\n          </form>\r\n        </Block>\r\n      }\r\n    />\r\n  )\r\n}\r\n","import { Block } from 'baseui/block';\r\nimport { Button } from 'baseui/button';\r\nimport { DisplayMedium, ParagraphMedium } from 'baseui/typography';\r\nimport { useDialogModal } from '../components/DialogModal';\r\nimport { LoginModal } from '../components/Modals/LoginModal';\r\nimport { NewCustomerModal } from '../components/Modals/NewCustomerModal';\r\n\r\nconst TitlePage = () => {\r\n  return (\r\n    <Block\r\n      margin=\"2rem auto\"\r\n      display=\"flex\"\r\n      flexDirection=\"column\"\r\n      alignItems=\"center\"\r\n      $style={{ textAlign: 'center' }}\r\n    >\r\n      <DisplayMedium>Banking System</DisplayMedium>\r\n      <ParagraphMedium>By Matthew Seto | CS 157A Project 1</ParagraphMedium>\r\n      <TitleScreenModalManager />\r\n    </Block>\r\n  );\r\n};\r\n\r\nexport default TitlePage\r\n\r\nconst TitleScreenModalManager = () => {\r\n  const newCustomerModal = useDialogModal();\r\n  const loginModal = useDialogModal();\r\n\r\n  return (\r\n    <Block\r\n      display=\"flex\"\r\n      flexDirection={['column', 'column', 'row']}\r\n      width=\"50%\"\r\n      maxWidth=\"750px\"\r\n    >\r\n      <Block\r\n        width=\"100%\"\r\n        marginRight={[0, 0, '1rem']}\r\n        marginBottom={['1rem', '1rem', 0]}\r\n      >\r\n        <Button\r\n          onClick={newCustomerModal.open}\r\n          $style={{\r\n            width: '100%',\r\n          }}\r\n        >\r\n          New Customer\r\n        </Button>\r\n      </Block>\r\n      <Block width=\"100%\">\r\n        <Button onClick={loginModal.open} $style={{ width: '100%' }}>\r\n          Login\r\n        </Button>\r\n      </Block>\r\n      <NewCustomerModal newCustomerModal={newCustomerModal} />\r\n      <LoginModal loginModal={loginModal} />\r\n    </Block>\r\n  );\r\n};\r\n","import { Block } from 'baseui/block'\r\nimport { BrowserRouter, Route, Routes } from 'react-router-dom'\r\nimport ConnectionTest from './components/ConnectionTest'\r\nimport { LoginProvider } from './LoginContext'\r\nimport AdminPage from './pages/AdminPage'\r\nimport CustomerPage from './pages/CustomerPage'\r\nimport TitlePage from './pages/TitlePage'\r\n\r\nexport const ROUTES = {\r\n  title: '/',\r\n  customer: '/customer',\r\n  admin: '/admin',\r\n}\r\n\r\nconst App = () => {\r\n  return (\r\n    <LoginProvider>\r\n      <Block\r\n        maxWidth=\"100vw\"\r\n        height=\"100vh\"\r\n        overflow=\"hidden\"\r\n        backgroundColor=\"#141414\"\r\n      >\r\n        <div style={{ position: 'absolute', left: 0, top: '-1rem' }}>\r\n          <ConnectionTest />\r\n        </div>\r\n        <BrowserRouter>\r\n          <Routes>\r\n            <Route path={ROUTES.title} element={<TitlePage />} caseSensitive />\r\n            <Route path={ROUTES.customer} element={<CustomerPage />} />\r\n            <Route path={ROUTES.admin} element={<AdminPage />} />\r\n          </Routes>\r\n        </BrowserRouter>\r\n      </Block>\r\n    </LoginProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { createDarkTheme } from 'baseui'\r\n\r\nconst theme = createDarkTheme({ primaryFontFamily: 'monospace' })\r\n\r\nexport default theme\r\n","import { BaseProvider } from 'baseui'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Client as Styletron } from 'styletron-engine-atomic'\nimport { Provider as StyletronProvider } from 'styletron-react'\nimport App from './App'\nimport './index.css'\nimport theme from './theme'\n\nconst engine = new Styletron()\n\nReactDOM.render(\n  <React.StrictMode>\n    <BaseProvider theme={theme}>\n      <StyletronProvider value={engine}>\n        <App />\n      </StyletronProvider>\n    </BaseProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}